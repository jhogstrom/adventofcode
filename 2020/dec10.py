import os
import itertools
from timing import timeit
from pprint import pprint

filename = os.path.abspath(__file__).replace(".py", ".txt")
if not os.path.exists(filename):
    raise Exception(f"'{filename} does not exist")
data = [int(_.strip()) for _ in open(filename, 'r').readlines()]

# data = [16,10,15,5,1,11,7,19,6,12,4]
# data = [28,33,18,42,31,14,46,20,48,47,24,23,49,45,19,38,39,11,1,32,25,35,8,17,7,9,4,2,34,10,3]


data = sorted(data)
data = [0] + data + [data[-1] + 3]



@timeit
def star1():
    jump1 = jump3 = c = 0
    for n in data:
        d = n-c
        if d == 1:
            jump1 += 1
        elif d == 3:
            jump3 += 1
        c = n

    # print(f"* {jump1 * jump3} ({jump1}, {jump3})")
    return f"* {jump1 * jump3}"


@timeit
def star2():
    c = s = 0
    r = 1
    # How many permutations are generated by a sequence of length k?
    perms = {0: 1, 1: 1, 2: 2, 3: 4, 4: 7}
    # Find all sequences with step 1 and multiply the permutations they yield
    for n in data:
        if n-c == 1:
            s += 1
        else:
            if s >= 2:
                r *= perms[s]
            s = 0
        c = n

    # print("**", r)
    return f"** {r}"


@timeit
def star1_2():
    r = 1
    # How many permutations are generated by a sequence of length k?
    perms = {0: 1, 1: 1, 2: 2, 3: 4, 4: 7}
    jump1 = jump3 = c = s = 0
    for n in data:
        d = n-c
        if d == 1:
            jump1 += 1
            s += 1
        else:
            if d == 3:
                jump3 += 1
            if s >= 2:
                r *= perms[s]
            s = 0

        c = n

    # print(f"X {jump1 * jump3} ({jump1}, {jump3})")
    # print(f"XX {r}")
    return [f"X {jump1 * jump3} ({jump1}, {jump3})", f"XX {r}"]



print(star1())
print(star2())
for _ in star1_2():
    print(_)